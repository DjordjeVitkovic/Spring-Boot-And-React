{"version":3,"sources":["Container.js","logo.svg","Footer.js","client.js","forms/AddStudentForm.js","Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Container","props","style","width","margin","textAlign","children","Footer","className","undefined","numberOfStudents","backgroundColor","marginRight","size","onClick","handleAddStudentClickEvent","type","checkStatus","response","ok","error","Error","statusText","json","then","e","Promise","reject","getAllStudents","fetch","inputBottomMargin","marginBottom","tagStyle","color","AddStudentForm","initialValues","firstName","lastName","email","gender","validate","values","errors","test","includes","onSubmit","student","setSubmitting","headers","method","body","JSON","stringify","addNewStudent","onSuccess","catch","err","onFailure","finally","touched","handleChange","handleBlur","handleSubmit","isSubmitting","submitForm","isValid","name","onChange","onBlur","value","placeholder","disabled","openNotification","message","description","notification","errorNotification","App","state","students","isFetching","isAddStudentModalVisible","openAddStudentModal","setState","closeAddStudentModal","fetchStudents","res","console","log","this","commonElements","title","visible","onOk","onCancel","httpRequestStatusCode","length","indicator","LoadingOutlined","fontSize","spin","columns","key","render","text","charAt","toUpperCase","dataIndex","dataSource","pagination","rowKey","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82e0ba7c.chunk.js","sourcesContent":["import React from 'react';\nexport const Container = props =>(\n    <div style={{width: '1400px', margin: '0 auto', textAlign:'center'}}>\n        {props.children}\n    </div>\n);\n\nexport default Container;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport Container from \"./Container\";\nimport {Avatar, Button} from \"antd\";\nimport './Footer.css';\n\nconst Footer = (props) =>(\n    <div className='footer'>\n        <Container>\n            {props.numberOfStudents !== undefined ?\n                <Avatar style={{backgroundColor: '#f56a00', marginRight: '5px'}}\n                        size='large'>{props.numberOfStudents}</Avatar> : null\n            }\n            <Button onClick={() => props.handleAddStudentClickEvent()} type='primary'>Add new student +</Button>\n        </Container>\n    </div>\n);\n\nexport default Footer;","import fetch from \"unfetch\";\n\nconst checkStatus = response => {\n    if(response.ok) {\n        return response;\n    }else{\n        let error = new Error(response.statusText);\n        error.response = response;\n        response.json().then(e => {\n            error.error = e;\n        });\n        return Promise.reject(error);\n    }\n}\n\nexport const getAllStudents = () =>\n    fetch('api/students').then(checkStatus);\n\nexport const addNewStudent = student =>\n    fetch('api/students', {\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        method: 'POST',\n        body: JSON.stringify(student)\n    }).then(checkStatus);","import React from 'react';\nimport { Formik } from 'formik';\nimport {Input, Button, Tag} from \"antd\";\nimport { addNewStudent } from \"../client\";\n\nconst inputBottomMargin = {marginBottom: '10px'};\nconst tagStyle = {backgroundColor: '#f50', color: 'white', ...inputBottomMargin};\n\nconst AddStudentForm = (props) =>(\n\n                    <Formik\n                        initialValues={{ firstName: '', lastName: '', email: '', gender: ''}}\n                        validate={values => {\n                            const errors = {};\n\n                            if(!values.firstName)\n                            {\n                                errors.firstName = 'Fist Name Required'\n                            }\n                            if(!values.lastName)\n                            {\n                                errors.lastName = 'Last Name Required'\n                            }\n                            if (!values.email) {\n                                errors.email = 'Email Required';\n                            } else if (\n                                !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n                            ) {\n                                errors.email = 'Invalid email address';\n                            }\n                            if(!values.gender)\n                            {\n                                errors.gender = 'Gender Required'\n                            }else if(!['MALE', 'male', 'FEMALE', 'female'].includes(values.gender)){\n                                errors.gender = 'Gender must be (MALE, male, FEMALE, female)';\n                            }\n                            return errors;\n                        }}\n                        onSubmit={(student, { setSubmitting }) => {\n                                addNewStudent(student).then(() => {\n                                    props.onSuccess();\n                                }).catch(err => {\n                                    props.onFailure(err);\n                                })\n                                    .finally(() =>{\n                                        setSubmitting(false);\n\n                                    })\n                        }}\n                    >\n                        {({\n                              values,\n                              errors,\n                              touched,\n                              handleChange,\n                              handleBlur,\n                              handleSubmit,\n                              isSubmitting,\n                              submitForm,\n                              isValid\n                              /* and other goodies */\n                          }) => (\n                            <form onSubmit={handleSubmit}>\n                                <Input\n                                    style={inputBottomMargin}\n                                    name=\"firstName\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.firstName}\n                                    placeholder='Fist name. E.g John'\n                                />\n                                {errors.firstName && touched.firstName &&\n                                <Tag style={tagStyle}>{errors.firstName}</Tag>}\n                                <Input\n                                    style={inputBottomMargin}\n                                    name=\"lastName\"\n                                    type='email'\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.lastName}\n                                    placeholder='Last name. E.g Jones'\n                                />\n                                {errors.lastName && touched.lastName &&\n                                <Tag style={tagStyle}>{errors.lastName}</Tag>}\n                                <Input\n                                    style={inputBottomMargin}\n                                    name=\"email\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.email}\n                                    placeholder='Email. E.g example@example.com'\n                                />\n                                {errors.email && touched.email &&\n                                <Tag style={tagStyle}>{errors.email}</Tag>}\n                                <Input\n                                    style={inputBottomMargin}\n                                    name=\"gender\"\n                                    onChange={handleChange}\n                                    onBlur={handleBlur}\n                                    value={values.gender}\n                                    placeholder='Gender. E.g Male or Female'\n                                />\n                                {errors.gender && touched.gender &&\n                                <Tag style={tagStyle}>{errors.gender}</Tag>}\n                                <Button\n                                    onClick={() => submitForm()}\n                                    type=\"submit\"\n                                    disabled={isSubmitting | (touched && !isValid)}>\n                                    Submit\n                                </Button>\n                            </form>\n                        )}\n                    </Formik>\n            );\n\nexport default AddStudentForm;","import {notification} from \"antd\";\n\nconst openNotification = (type,message, description) => {\n    notification[type]({\n        message,\n        description\n    });\n};\n\nexport const successNotification =(message, description) =>\n    openNotification('success', message,description);\n\nexport const infoNotification =(message, description) =>\n    openNotification('info', message,description);\n\nexport const warningNotification =(message, description) =>\n    openNotification('warning', message,description);\n\nexport const errorNotification =(message, description) =>\n    openNotification('error', message,description);","import logo from './logo.svg';\nimport React, { Component } from 'react';\nimport Container from \"./Container\";\nimport Footer from \"./Footer\";\nimport './App.css';\nimport { getAllStudents } from './client';\nimport AddStudentForm from './forms/AddStudentForm';\nimport { errorNotification } from \"./Notification\";\nimport {\n    Table,\n    Avatar,\n    Spin,\n    Modal,\n    Empty\n} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\n\nconst getIndicatorIcon = () => <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nclass  App extends Component{\n\n    state = {\n        students: [],\n        isFetching: false,\n        isAddStudentModalVisible: false\n    }\n\n    componentDidMount() {\n        this.fetchStudents();\n    }\n\n    openAddStudentModal = () => this.setState({isAddStudentModalVisible: true})\n\n    closeAddStudentModal = () => this.setState({isAddStudentModalVisible: false})\n\n    fetchStudents = () =>{\n        this.setState({\n            isFetching: true\n        });\n        getAllStudents()\n            .then(res => res.json().\n                then(students => {\n                console.log(students);\n                this.setState({\n                     students,\n                    isFetching: false\n                 });\n        }))\n            .catch(error => {\n                console.log(error.error);\n                const message = error.error.message;\n                const description = error.error.error;\n                errorNotification(message,description);\n                this.setState({\n                    isFetching:  false\n                });\n\n            });\n    }\n\n  render() {\n        const { students, isFetching, isAddStudentModalVisible} = this.state;\n\n      const commonElements = () =>(\n          <div>\n              <Modal\n                  title = 'Add new student'\n                  visible={isAddStudentModalVisible}\n                  onOk={() =>this.closeAddStudentModal()}\n                  onCancel={() =>this.closeAddStudentModal()}\n                  width={1000} >\n                  <AddStudentForm\n                      onSuccess={() => {\n                          this.closeAddStudentModal();\n                          this.fetchStudents();\n                      }}\n                      onFailure={(error) =>{\n                          const message = error.error.message;\n                          const description = error.error.httpRequestStatusCode;\n                          errorNotification(message, description);\n                      }}\n                  />\n              </Modal>\n              <Footer\n                  numberOfStudents={students.length}\n                  handleAddStudentClickEvent={() => this.openAddStudentModal()}/>\n          </div>\n      )\n\n        if(isFetching){\n            return (\n                <Container>\n                    <Spin indicator={getIndicatorIcon()}/>\n                </Container>\n            );\n        }\n\n        if(students && students.length) {\n\n            const columns = [\n                {\n                  title: '',\n                  key: 'avatar',\n                  render: (text, student) =>(\n                      <Avatar size='large'>\n                          {`${student.firstName.charAt(0).toUpperCase()}${student.lastName.charAt(0).toUpperCase()}`}\n                      </Avatar>\n                  )\n                },\n                {\n                    title: 'Student Id',\n                    dataIndex: 'studentId',\n                    key: 'studentId'\n                },\n                {\n                    title: 'First Name',\n                    dataIndex: 'firstName',\n                    key: 'firstName'\n                },\n                {\n                    title: 'Last Name',\n                    dataIndex: 'lastName',\n                    key: 'lastName'\n                },\n                {\n                    title: 'Email',\n                    dataIndex: 'email',\n                    key: 'email'\n                },\n                {\n                    title: 'Gender',\n                    dataIndex: 'gender',\n                    key: 'gender'\n                }\n            ];\n            return (\n                <Container>\n                <Table\n                       style={{marginBottom: '100px'}}\n                       dataSource={students}\n                       columns={columns}\n                       pagination={false}\n                       rowKey='studentId'/>\n                       {commonElements()}\n                </Container>\n            );\n        }\n      return ( <Container>\n              <Empty description={\n                <h1>No Students found </h1>\n                 }/>\n              {commonElements()}\n            </Container>\n      )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}